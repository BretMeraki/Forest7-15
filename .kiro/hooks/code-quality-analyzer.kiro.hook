{
  "enabled": true,
  "name": "Code Quality Analyzer",
  "description": "Monitors source code files for changes and analyzes modified code for potential improvements including code smells, design patterns, and best practices. Generates actionable suggestions for improving code quality while maintaining existing functionality.",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/*.js",
      "**/*.ts",
      "**/*.jsx",
      "**/*.tsx",
      "**/*.py",
      "**/*.java",
      "**/*.cpp",
      "**/*.c",
      "**/*.cs",
      "**/*.php",
      "**/*.rb",
      "**/*.go",
      "**/*.rs",
      "**/*.swift",
      "**/*.kt"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Analyze the modified code in the changed files for potential improvements. Focus on:\n\n1. **Code Smells**: Identify any code smells such as long methods, large classes, duplicate code, or complex conditionals\n2. **Design Patterns**: Suggest appropriate design patterns that could improve the code structure\n3. **Best Practices**: Check adherence to language-specific best practices and coding standards\n4. **Readability**: Assess code readability and suggest improvements for variable names, comments, and structure\n5. **Maintainability**: Identify areas that could be refactored for better maintainability\n6. **Performance**: Spot potential performance optimizations without changing functionality\n\nFor each suggestion, provide:\n- Clear explanation of the issue\n- Specific code examples showing the problem\n- Recommended solution with example code\n- Impact assessment (readability, performance, maintainability)\n\nMaintain the existing functionality while suggesting improvements. Prioritize suggestions by impact and implementation difficulty."
  }
}